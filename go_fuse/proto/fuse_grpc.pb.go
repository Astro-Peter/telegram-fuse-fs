// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: proto/fuse.proto

package go_fuse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelegramBotClient is the client API for TelegramBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramBotClient interface {
	GetObjectsInDir(ctx context.Context, in *DirLocation, opts ...grpc.CallOption) (*DirObjects, error)
	GetFileUrl(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*FileUrl, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (TelegramBot_UploadFileClient, error)
	GiveFileName(ctx context.Context, in *FileMetaData, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type telegramBotClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramBotClient(cc grpc.ClientConnInterface) TelegramBotClient {
	return &telegramBotClient{cc}
}

func (c *telegramBotClient) GetObjectsInDir(ctx context.Context, in *DirLocation, opts ...grpc.CallOption) (*DirObjects, error) {
	out := new(DirObjects)
	err := c.cc.Invoke(ctx, "/fuse_tg.telegram_bot/GetObjectsInDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramBotClient) GetFileUrl(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*FileUrl, error) {
	out := new(FileUrl)
	err := c.cc.Invoke(ctx, "/fuse_tg.telegram_bot/GetFileUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramBotClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (TelegramBot_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelegramBot_ServiceDesc.Streams[0], "/fuse_tg.telegram_bot/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &telegramBotUploadFileClient{stream}
	return x, nil
}

type TelegramBot_UploadFileClient interface {
	Send(*FileData) error
	CloseAndRecv() (*FileId, error)
	grpc.ClientStream
}

type telegramBotUploadFileClient struct {
	grpc.ClientStream
}

func (x *telegramBotUploadFileClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telegramBotUploadFileClient) CloseAndRecv() (*FileId, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *telegramBotClient) GiveFileName(ctx context.Context, in *FileMetaData, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fuse_tg.telegram_bot/GiveFileName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramBotServer is the server API for TelegramBot service.
// All implementations must embed UnimplementedTelegramBotServer
// for forward compatibility
type TelegramBotServer interface {
	GetObjectsInDir(context.Context, *DirLocation) (*DirObjects, error)
	GetFileUrl(context.Context, *FileName) (*FileUrl, error)
	UploadFile(TelegramBot_UploadFileServer) error
	GiveFileName(context.Context, *FileMetaData) (*emptypb.Empty, error)
	mustEmbedUnimplementedTelegramBotServer()
}

// UnimplementedTelegramBotServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramBotServer struct {
}

func (UnimplementedTelegramBotServer) GetObjectsInDir(context.Context, *DirLocation) (*DirObjects, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsInDir not implemented")
}
func (UnimplementedTelegramBotServer) GetFileUrl(context.Context, *FileName) (*FileUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileUrl not implemented")
}
func (UnimplementedTelegramBotServer) UploadFile(TelegramBot_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedTelegramBotServer) GiveFileName(context.Context, *FileMetaData) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveFileName not implemented")
}
func (UnimplementedTelegramBotServer) mustEmbedUnimplementedTelegramBotServer() {}

// UnsafeTelegramBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramBotServer will
// result in compilation errors.
type UnsafeTelegramBotServer interface {
	mustEmbedUnimplementedTelegramBotServer()
}

func RegisterTelegramBotServer(s grpc.ServiceRegistrar, srv TelegramBotServer) {
	s.RegisterService(&TelegramBot_ServiceDesc, srv)
}

func _TelegramBot_GetObjectsInDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotServer).GetObjectsInDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuse_tg.telegram_bot/GetObjectsInDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotServer).GetObjectsInDir(ctx, req.(*DirLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramBot_GetFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotServer).GetFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuse_tg.telegram_bot/GetFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotServer).GetFileUrl(ctx, req.(*FileName))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramBot_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelegramBotServer).UploadFile(&telegramBotUploadFileServer{stream})
}

type TelegramBot_UploadFileServer interface {
	SendAndClose(*FileId) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type telegramBotUploadFileServer struct {
	grpc.ServerStream
}

func (x *telegramBotUploadFileServer) SendAndClose(m *FileId) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telegramBotUploadFileServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TelegramBot_GiveFileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileMetaData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramBotServer).GiveFileName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fuse_tg.telegram_bot/GiveFileName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramBotServer).GiveFileName(ctx, req.(*FileMetaData))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramBot_ServiceDesc is the grpc.ServiceDesc for TelegramBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fuse_tg.telegram_bot",
	HandlerType: (*TelegramBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetObjectsInDir",
			Handler:    _TelegramBot_GetObjectsInDir_Handler,
		},
		{
			MethodName: "GetFileUrl",
			Handler:    _TelegramBot_GetFileUrl_Handler,
		},
		{
			MethodName: "GiveFileName",
			Handler:    _TelegramBot_GiveFileName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _TelegramBot_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/fuse.proto",
}
